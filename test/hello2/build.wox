import "wox" for W, R

var TARGET_MAIN = "hello"
var TARGET_COMPRESSED = "hello.zst"

// args
W.log_inf("running build with args: %(W.cliopts())")
var debug = W.cliopt_bool("-g", false)
var opt_level = W.cliopt_int("-O", 2)
var cc = W.cliopt("-cc", "gcc")

// cflags
var cflags = ["-Wall"]

if (debug) cflags.add("-g")
cflags.add("-O%(opt_level)")

// libs
var libs = ["m"]
for (lib in libs) {
    cflags.add("-l%(lib)")
}
// just for fun, get all libc
var libc_sos = W.shell("ldconfig -p | grep libc.so | awk '{print $4}'").trim().split("\n")
W.log_inf("available libc.so's: %(libc_sos)")

// srcs
var srcs = W.glob("./*.c")

// objs
var objs = W.ext_replace(srcs, ".c", ".o")

// return the recipes

// 1. a recipe for each .c -> .o
var obj_recipes = []
for (src_ix in 0...srcs.count) {
    var c_file = srcs[src_ix]
    var o_file = objs[src_ix]

    var obj_recipe = W.recipe(
        [c_file],
        [o_file],
        [
            // run gcc to compile a single .c file into a .o file
            R.c("%(cc) %(cflags) -c %(c_file) -o %(o_file)"),
        ]
    )
    obj_recipes.add(obj_recipe)
}

// 2. a recipe for the main target
var main_recipe = W.recipe(
    objs,
    [TARGET_MAIN],
    [
        // link all the .o files into the main target
        R.c("%(cc) %(cflags) %(objs) -o %(TARGET_MAIN)"),
    ]
)

// 3. a recipe for the compressed target
var compressed_recipe = W.recipe(
    [TARGET_MAIN],
    [TARGET_COMPRESSED],
    [
        // compress the main target
        R.c("tar --zstd -cf %(TARGET_COMPRESSED) %(TARGET_MAIN)"),
    ]
)

// 4. a virtual recipe for cleaning
var clean_recipe = W.virtual_recipe(
    "clean",
    [],
    [
        // remove all the .o files and the targets
        R.c("rm -f %(objs) %(TARGET_MAIN) %(TARGET_COMPRESSED)"),
    ]
)

// 5. a virtual recipe to cat all the source files together and scp that to example.com
var upload_main_recipe = W.virtual_recipe(
    "upload_main",
    [srcs],
    [
        // cat all the source files together and scp that to example.com
        R.c("cat %(srcs) | ssh example.com 'cat > /tmp/hello.c'"),
    ]
)

class Build {
    recipes {
        obj_recipes + [main_recipe, compressed_recipe, clean_recipe, upload_main_recipe]
    }
    default_recipe {
        main_recipe
    }
}
